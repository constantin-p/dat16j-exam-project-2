# Step 1 (create the db)
DROP DATABASE IF EXISTS `demodb`;
CREATE DATABASE demodb;

# Step 2 (select the db)
USE demodb;


# PERMISSION SYSTEM
# Step 3 (create the accounttypes table)
DROP TABLE IF EXISTS `accounttypes`;
CREATE TABLE accounttypes (
  id INT NOT NULL AUTO_INCREMENT,

  name VARCHAR(25) NOT NULL UNIQUE,

  PRIMARY KEY (id)
);

# Step 4 (create the accesstypes table)
DROP TABLE IF EXISTS `accesstypes`;
CREATE TABLE accesstypes (
  id INT NOT NULL AUTO_INCREMENT,

  name VARCHAR(25) NOT NULL UNIQUE,

  PRIMARY KEY (id)
);

# Step 5 (create the accounttype_accesstype table)
DROP TABLE IF EXISTS `accounttype_accesstype`;
CREATE TABLE accounttype_accesstype (
  id INT NOT NULL AUTO_INCREMENT,

  accounttype_id INT NOT NULL,
  accesstype_id INT NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (accounttype_id) REFERENCES accounttypes(id),
  FOREIGN KEY (accesstype_id) REFERENCES accesstypes(id)
);

# Step 6 (populate the accesstypes table with the hardcoded options)
INSERT INTO `accesstypes` (`name`)
VALUES
	('accounts'),
	('account_types'),
	('cleaning'),
	('clients'),
	('fleet'),
	('extras'),
	('orders'),
	('prices'),
	('cancellation_periods'),
	('seasons'),
	('payments'),
	('refunds'),
	('repairs'),
	('service');

# END PERMISSION SYSTEM


# Step 7 (create the accounts table)
DROP TABLE IF EXISTS `accounts`;
CREATE TABLE accounts (
  id INT NOT NULL AUTO_INCREMENT,

  username VARCHAR(25) NOT NULL UNIQUE,
  hash CHAR(166) NOT NULL,

  accounttype_id INT NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (accounttype_id) REFERENCES accounttypes(id)
);

# Step 8 (create the clients table)
DROP TABLE IF EXISTS `clients`;
CREATE TABLE clients (
  id INT NOT NULL AUTO_INCREMENT,

  first_name VARCHAR(25) NOT NULL,
  last_name VARCHAR(25) NOT NULL,
  email VARCHAR(25) NOT NULL UNIQUE,

  date_of_birth DATE NOT NULL,   # yyyy-MM-dd

  PRIMARY KEY (id)
);


# PRICING SYSTEM
# Step 9 (create the pricetypes table)
DROP TABLE IF EXISTS `pricetypes`;
CREATE TABLE pricetypes (
  id INT NOT NULL AUTO_INCREMENT,

  name VARCHAR(25) NOT NULL,

  PRIMARY KEY (id)
);

# Step 10 (create the prices table)
DROP TABLE IF EXISTS `prices`;
CREATE TABLE prices (
  id INT NOT NULL AUTO_INCREMENT,

  name VARCHAR(25) NOT NULL UNIQUE,
  value FLOAT NOT NULL,

  pricetype_id INT NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (pricetype_id) REFERENCES pricetypes(id)
);


# Step 11 (populate the pricetypes table with hardcoded options)
INSERT INTO `pricetypes` (`name`)
VALUES
	('unit'),
	('day'),
	('kilometer'),
	('modifier');

# END PRICING SYSTEM


# Step 12 (create the motorhomes table)
DROP TABLE IF EXISTS `motorhomes`;
CREATE TABLE motorhomes (
  id INT NOT NULL AUTO_INCREMENT,

  model VARCHAR(25) NOT NULL,
  brand VARCHAR(25) NOT NULL,

  capacity INT NOT NULL,
  mileage INT NOT NULL,

  price_id INT NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (price_id) REFERENCES prices(id)
);

# Step 13 (create the extras table)
DROP TABLE IF EXISTS `extras`;
CREATE TABLE extras (
  id INT NOT NULL AUTO_INCREMENT,

  name VARCHAR(25) NOT NULL,

  price_id INT NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (price_id) REFERENCES prices(id)
);

# Step 14 (create the seasons table)
DROP TABLE IF EXISTS `seasons`;
CREATE TABLE seasons (
  id INT NOT NULL AUTO_INCREMENT,

  name VARCHAR(25) NOT NULL,
  start CHAR(5) NOT NULL,   # MM:DD

  price_id INT NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (price_id) REFERENCES prices(id)
);

# Step 15 (create the cancellation_periods table)
DROP TABLE IF EXISTS `cancellation_periods`;
CREATE TABLE cancellation_periods (
  id INT NOT NULL AUTO_INCREMENT,

  name VARCHAR(25) NOT NULL,
  start INT,   # days, NULL for infinite

  price_id INT NOT NULL,
  minimum_price_id INT,   # NULL for none

  PRIMARY KEY (id),
  FOREIGN KEY (price_id) REFERENCES prices(id),
  FOREIGN KEY (minimum_price_id) REFERENCES prices(id)
);

# Step 16 (create the orders table)
DROP TABLE IF EXISTS `orders`;
CREATE TABLE orders (
  id INT NOT NULL AUTO_INCREMENT,

  start_date DATE NOT NULL,   # yyyy-MM-dd
  end_date DATE NOT NULL,     # yyyy-MM-dd

  pick_up VARCHAR(65) NOT NULL,
  drop_off VARCHAR(65) NOT NULL,

  client_id INT NOT NULL,

  motorhome_id INT NOT NULL,
  motorhome_price_value FLOAT NOT NULL,
  motorhome_mileage_start INT NOT NULL,
  motorhome_mileage_end INT NOT NULL,

  season_id INT NOT NULL,               # REMOVE
  season_price_modifier FLOAT NOT NULL,

  cancellation_price_value FLOAT,   # NULL means the order is not canceled, <= 1 modifier, > 1 fixed price

  PRIMARY KEY (id),
  FOREIGN KEY (client_id) REFERENCES clients(id),
  FOREIGN KEY (motorhome_id) REFERENCES motorhomes(id),
  FOREIGN KEY (season_id) REFERENCES seasons(id)
);

# Step 17 (create the order_extra table)
DROP TABLE IF EXISTS `order_extra`;
CREATE TABLE order_extra (
  id INT NOT NULL AUTO_INCREMENT,

  order_id INT NOT NULL,
  extra_id INT NOT NULL,

  extra_price_value INT NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (order_id) REFERENCES orders(id),
  FOREIGN KEY (extra_id) REFERENCES extras(id)
);

# Step 18 (create the invoices table)
DROP TABLE IF EXISTS `invoices`;
CREATE TABLE invoices (
  id INT NOT NULL AUTO_INCREMENT,

  order_id INT NOT NULL,

  date DATE NOT NULL,   # yyyy-MM-dd
  due_date DATE NOT NULL,   # yyyy-MM-dd

  PRIMARY KEY (id),
  FOREIGN KEY (order_id) REFERENCES orders(id)
);

# Step 19 (create the payments table)
DROP TABLE IF EXISTS `payments`;
CREATE TABLE payments (
  id INT NOT NULL AUTO_INCREMENT,

  invoice_id INT NOT NULL,

  date DATE,   # yyyy-MM-dd, NULL means a pending payment

  PRIMARY KEY (id),
  FOREIGN KEY (invoice_id) REFERENCES invoices(id)
);

# Step 20 (create the refunds table)
DROP TABLE IF EXISTS `refunds`;
CREATE TABLE refunds (
  id INT NOT NULL AUTO_INCREMENT,

  invoice_id INT NOT NULL,
  payment_id INT NOT NULL,

  date DATE,   # yyyy-MM-dd NULL means a pending refund

  PRIMARY KEY (id),
  FOREIGN KEY (invoice_id) REFERENCES invoices(id),
  FOREIGN KEY (payment_id) REFERENCES payments(id)
);

# Step 21 (create the cleaningjobs table)
DROP TABLE IF EXISTS `cleaningjobs`;
CREATE TABLE cleaningjobs (
  id INT NOT NULL AUTO_INCREMENT,

  order_id INT NOT NULL,

  date DATE,   # yyyy-MM-dd
  done BOOLEAN,

  PRIMARY KEY (id),
  FOREIGN KEY (order_id) REFERENCES orders(id)
);

# Step 22 (create the servicejobs table)
DROP TABLE IF EXISTS `servicejobs`;
CREATE TABLE servicejobs (
  id INT NOT NULL AUTO_INCREMENT,

  order_id INT NOT NULL,

  date DATE,   # yyyy-MM-dd
  done BOOLEAN,

  PRIMARY KEY (id),
  FOREIGN KEY (order_id) REFERENCES orders(id)
);

# Step 23 (create the repairjobs table)
DROP TABLE IF EXISTS `repairjobs`;
CREATE TABLE repairjobs (
  id INT NOT NULL AUTO_INCREMENT,

  motorhome_id INT NOT NULL,

  date DATE,                # yyyy-MM-dd
  done BOOLEAN,
  details VARCHAR(250),     # NULL means a pending repair

  PRIMARY KEY (id),
  FOREIGN KEY (motorhome_id) REFERENCES motorhomes(id)
);